{"version":3,"sources":["../src/index.js"],"names":["LocalStrategy","require","Strategy","config","process","env","NODE_ENV","app","server","createServer","use","static","__dirname","console","log","json","limit","bodyLimit","req","res","next","setHeader","client_URL","initialize","Account","usernameField","passwordField","authenticate","serializeUser","deserializeUser","listen","port","address"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAIA;;;;;;AAHA,IAAMA,gBAAgBC,QAAQ,gBAAR,EAA0BC,QAAhD;;AAEA,IAAIC,SAASF,QAAQ,mBAAR,EAA6BG,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,aAArD,CAAb;;;AAIA,IAAIC,MAAM,wBAAV;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;AACA,IAAIH,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,MAAIG,GAAJ,CAAQ,gBAAR,EAA0B,kBAAQC,MAAR,CAAeC,YAAY,gBAA3B,CAA1B;AACAC,UAAQC,GAAR,CAAYF,SAAZ;AACD;;AAEDL,IAAIG,GAAJ,CAAQ,uBAAR;AACA;AACAH,IAAIG,GAAJ,CAAQ,qBAAWK,IAAX,CAAgB;AACtBC,SAAOb,OAAOc;AADQ,CAAhB,CAAR;;AAKAV,IAAIG,GAAJ,CAAQ,UAAUQ,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;;AAEhC;AACAD,MAAIE,SAAJ,CAAc,6BAAd,EAA6ClB,OAAOmB,UAApD;;AAEA;AACAH,MAAIE,SAAJ,CAAc,8BAAd,EAA8C,wCAA9C;;AAEA;AACAF,MAAIE,SAAJ,CAAc,8BAAd,EAA8C,6EAA9C;;AAEA;AACA;AACAF,MAAIE,SAAJ,CAAc,kCAAd,EAAkD,IAAlD;;AAEA;AACAD;AACD,CAjBD;;AAmBAb,IAAIG,GAAJ,CAAQ,mBAASa,UAAT,EAAR;AACA,IAAIC,UAAUvB,QAAQ,iBAAR,CAAd;AACA,mBAASS,GAAT,CAAa,IAAIV,aAAJ,CAAkB;AAC7ByB,iBAAe,OADc;AAE7BC,iBAAe;AAFc,CAAlB,EAIXF,QAAQG,YAAR,EAJW,CAAb;AAMA,mBAASC,aAAT,CAAuBJ,QAAQI,aAAR,EAAvB;AACA,mBAASC,eAAT,CAAyBL,QAAQK,eAAR,EAAzB;;AAEA,IAAIzB,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,MAAIG,GAAJ,CAAQ,KAAR;AACD,CAFD,MAEO;AACLH,MAAIG,GAAJ,CAAQ,SAAR;AACD;;AAEDH,IAAIC,MAAJ,CAAWsB,MAAX,CAAkB3B,OAAO4B,IAAzB;AACAlB,QAAQC,GAAR,sBAA+BP,IAAIC,MAAJ,CAAWwB,OAAX,GAAqBD,IAApD;;kBAEexB,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport mongoose from 'mongoose';\nimport passport from 'passport';\nimport helmet from 'helmet';\nconst LocalStrategy = require('passport-local').Strategy;\n\nvar config = require('./config/env.json')[process.env.NODE_ENV || 'development'];\nimport routes from './routes';\n\n\nlet app = express();\napp.server = http.createServer(app);\nif (process.env.NODE_ENV === \"development\") {\n  app.use('/public/images', express.static(__dirname + '/public/images')); \n  console.log(__dirname)\n}\n\napp.use(helmet());\n//middleware\napp.use(bodyParser.json({\n  limit: config.bodyLimit\n}));\n\n\napp.use(function (req, res, next) {\n\n  // Website you wish to allow to connect\n  res.setHeader('Access-Control-Allow-Origin', config.client_URL);\n\n  // Request methods you wish to allow\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n\n  // Request headers you wish to allow\n  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With, Access-Control-Allow-Headers, Authorization, content-type');\n\n  // Set to true if you need the website to include cookies in the requests sent\n  // to the API (e.g. in case you use sessions)\n  res.setHeader('Access-Control-Allow-Credentials', true);\n\n  // Pass to next layer of middleware\n  next();\n});\n\napp.use(passport.initialize());\nlet Account = require('./model/account');\npassport.use(new LocalStrategy({\n  usernameField: 'email',\n  passwordField: 'password'\n},\n  Account.authenticate()\n));\npassport.serializeUser(Account.serializeUser());\npassport.deserializeUser(Account.deserializeUser());\n\nif (process.env.NODE_ENV === \"development\") {\n  app.use('/V1', routes);\n} else {\n  app.use('/api/V1', routes);\n}\n\napp.server.listen(config.port);\nconsole.log(`Started on port ${app.server.address().port}`);\n\nexport default app;"]}