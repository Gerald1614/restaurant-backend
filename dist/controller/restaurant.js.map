{"version":3,"sources":["../../src/controller/restaurant.js"],"names":["config","require","process","env","NODE_ENV","multipartUpload","storage","diskStorage","destination","req","file","callback","path","STATIC_DIR","filename","originalname","single","db","api","post","res","json","console","log","params","findById","id","err","city","status","send","body","newRest","name","foodType","picture","URL","avgCost","description","website","avgRating","geometry","coordinates","save","restaurant","restaurants","push","get","find","cityResto","counter","then","length","elem","catch","put","delete","reviews","findByIdAndRemove","review","remove","_id","message","userName","assert","query","user","account","promise","exec","ok","Promise","newReview","username","title","text","rate"],"mappings":"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","file":"restaurant.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport Restaurant from '../model/restaurant';\nimport Review from '../model/review';\nimport Account from '../model/account';\nimport City from '../model/city'\nimport multer from 'multer';\nvar config = require('../config/env.json')[process.env.NODE_ENV || 'development'];\n\nvar multipartUpload = multer({\n  storage: multer.diskStorage({\n  destination: function (req, file, callback) { \n    let path = config.STATIC_DIR + '/public/images';\n    callback(null, path);\n  },\n  filename: function (req, file, callback) { \n    callback(null, file.originalname);}})\n}).single('file');\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n  let api = Router();\n\napi.post('/uploads', multipartUpload, (req, res) => {\n    return res.json(req.file);\n});\n\napi.post('/add/:id', authenticate, (req, res) => {\n  console.log(req.params)\n  City.findById(req.params.id, (err, city) => {\n    if (err) {\n      res.status(500).send(\"There was a problem adding the information to the database.\");\n    }\n    console.log(req.body)\n  let newRest = new Restaurant();\n  newRest.name = req.body.name;\n  newRest.foodType = req.body.foodType;\n  if (req.body.picture=== config.URL + \"/public/images/undefined\") {\n    newRest.picture= config.URL + \"/public/images/restaurant_menu.png\";\n  } else {\n    newRest.picture = req.body.picture;\n  }\n  newRest.avgCost = req.body.avgCost;\n  newRest.description = req.body.description;\n  newRest.website = req.body.website;\n  newRest.city = req.params.id;\n  newRest.avgRating = null;\n  newRest.geometry.coordinates = req.body.geometry.coordinates;\n  newRest.save((err, restaurant) => {\n    if (err) {\n      res.status(500).send(\"There was a problem adding the restaurant.\" + err);\n    } else {\n      city.restaurants.push(newRest);\n      city.save(err => {\n        if(err) {\n          res.status(500).send(\"There was a problem updating city restaurant.\");\n        }\n        console.log(newRest)\n        res.status(200).send(newRest);\n      });\n    }\n\n  });\n});\n});\n\napi.get('/', (req, res) => {\n  Restaurant.find({}, (err, restaurant) => {\n    if (err) {\n      res.status(500).send(\"There was a problem reading the information from the database.\");\n    }\n    res.status(200).json(restaurant);\n  })\n})\n\napi.get('/city/:id', (req, res) => {\n  var cityResto = [];\n  var counter=0;\n   City.findById(req.params.id)\n   .then((city) => {\n     if (city.restaurants.length === 0) {\n      res.status(500).json(err)\n     } else {\n      for (let elem of city.restaurants) {\n        Restaurant.findById(elem).then((restaurant) => {\n           cityResto.push(restaurant);\n           if(counter ==city.restaurants.length-1) {\n            res.status(200).json(cityResto);\n           }\n           counter++;\n         })\n       }\n     }\n\n    })\n    .catch((err) => {\n      res.status(500).json(err)\n    })\n  })\n\napi.get('/:id', (req, res) => {\n  Restaurant.findById(req.params.id, (err, restaurant) => {\n    if(err) {\n      res.status(500).send(\"There was a problem reading the information from the database.\");\n    }\n    res.status(200).json(restaurant);\n  });\n});\n\napi.put('/:id', authenticate, (req, res) => {\n  Restaurant.findById(req.params.id, (err, restaurant) => {\n    if (err) {\n      res.send(err);\n    }\n    restaurant.avgRating = req.body.avgRating;\n    restaurant.save(err => {\n      if (err) {\n      res.send(err);\n    }\n    res.status(200).send(restaurant)\n    });\n  });\n});\n\napi.delete('/:id', (req, res) => {\n  Restaurant.findById(req.params.id, (err, restaurant) => {\n    if (err) {\n      res.status(500).send(\"There was a problem adding the information to the database.\");\n    }\n    console.log(restaurant.reviews)\n  for (let elem of restaurant.reviews) {\n    Review.findByIdAndRemove(elem, (err, review) => {\n    });\n  }\n  console.log(restaurant.city)\n  City.findByIdAndRemove(restaurant.city, (err, res) => {})\n})\n.then(\n  Restaurant.remove({\n    _id: req.params.id\n  }, (err, restaurant) => {\n    if (err) {\n      res.send(err);\n    }\n    res.status(200).json({ message: \"Restaurant Succesfully Removed\"})\n  })\n)\n\n});\n\napi.post('/reviews/add/:id', authenticate, (req, res) => {\n  var userName;\n  var assert = require('assert')\n  var query = Account.findById(req.user.id, (err, account) => {\n    if (err) {\n      res.status(500).send(\"There was a problem adding the information to the database.\");\n    } else {\n      userName = account.name\n      console.log(userName)\n    }\n  })\n  var promise = query.exec();\n  assert.ok(promise instanceof Promise);\n  promise.then (\n    Restaurant.findById(req.params.id, (err, restaurant) => {\n      if (err) {\n        res.status(500).send(\"There was a problem adding the information to the database.\");\n      } else {\n        let newReview = new Review();\n        newReview.username = userName;\n        newReview.title = req.body.title;\n        newReview.text = req.body.text;\n        newReview.rate = req.body.rate;\n        newReview.restaurant = req.params.id;\n        console.log(newReview)\n        newReview.save((err, review) => {\n          if (err) {\n            res.status(500).send(\"There was a problem adding the information to the database.\");\n          }\n          restaurant.reviews.push(newReview);\n          restaurant.save(err => {\n            if(err) {\n              res.status(500).send(\"There was a problem adding the information to the database.\");\n            }\n            console.log(newReview)\n            res.status(200).send(newReview);\n          })\n        })\n      }\n\n    })\n  )\n\n});\n\napi.get('/reviews/:id', (req, res) => {\n  Review.find({restaurant: req.params.id}, (err, reviews) => {\n    if (err) {\n      res.status(500).send(\"There was a problem reading the information from the database.\");\n    }\n    res.status(200).json(reviews)\n  });\n});\n\nreturn api;\n}"]}